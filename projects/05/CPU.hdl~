// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /////////////////////////////////
    // Cheat Sheet
    /////////////////////////////////

    // i xx a cccccc ddd jjj
    // i == instruction[15] (msb) == 0 == a instruction // 0vvvvvvvvvvvvvvv -> goes to A register
    // i == instruction[15] (msb) == 1 == c instruction // ixxaccccccdddjjj -> compute some stuff

    /////////////////////////////////

    // Needed parts
    /////////////////////////////////

    // ARegister
    // DRegister
    // ALU
    // PC

    /////////////////////////////////
    // Implementation
    /////////////////////////////////

    And(a=true, b=instruction[15], out=isCInstruction);
    Not(in=isCInstruction, out=isAInstruction);

    And(a=isCInstruction, b=instruction[4], out=loadDReg); // instruction[4] = d2 of c instruction
    And(a=isCInstruction, b=instruction[3], out=writeM); // instruction[3] = d3 of c instruction
    Or(a=isAInstruction, b=instruction[5], out=loadAReg); // instruction[5] = d1 of c instruction

    Mux16(a=aluOut, b=instruction, sel=isAInstruction, out=aRegIn);

    ARegister(in=aRegIn, load=loadAReg, out=aRegOut); // could be load if a instruction, could be alu output.
    DRegister(in=aluOut, load=loadDReg, out=dRegOut);
    And16(a=true, b=aluOut, out=outM); // copy all that shit to out M

    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=regOrMemory); // a if sel = 0

    ALU(
        x=dRegOut, 
        y=regOrMemory, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=aluOut, 
        zr=isZero, 
        ng=isNegative
    );

    Not(in=reset, out=notReset);

    Or16(a=false, b=aRegOut, out[0..14]=addressM);


    /////////////////////////////////
    // Do I Jump?
    /////////////////////////////////

    And(a=true, b=instruction[0], out=j3);
    And(a=true, b=instruction[1], out=j2);
    And(a=true, b=instruction[2], out=j1);

    Or(a=isZero, b=isNegative, out=lteqz);
    Not(in=lteqz, out=isPositive);

    And(a=isNegative, b=j1, out=jlt); 
    And(a=isZero, b=j2, out=jeq);    
    And(a=isPositive, b=j3, out=jgt);

    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=shouldJump);

    And(a=isCInstruction, b=shouldJump, out=shouldLoad);

    Not(in=shouldLoad, out=shouldInc);

    PC(in=aRegOut, inc=shouldInc, load=shouldLoad, reset=reset, out[0..14]=pc);
} 

}
